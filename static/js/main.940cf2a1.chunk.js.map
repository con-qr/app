{"version":3,"sources":["App.tsx","shared/security/cryptKey.tsx","index.tsx"],"names":["App","headers","Headers","set","useState","ocorreuUmaFalha","setOcorreuUmaFalha","expirou","setExpirou","nome","setNome","parseToken","queryParams","window","location","search","substring","split","map","v","reduce","key","value","decodeURIComponent","Map","token","get","simpleCrypto","Crypto","dadosCartao","JSON","parse","decrypt","exp","dataExpiracao","Date","verificarExpiracao","dados","vCard","require","vCardsJS","length","firstName","forEach","name","index","lastName","empresa","organization","cargo","title","site","url","telefone1","cellPhone","telefone2","workPhone","email","tipoDeEndereco","workAddress","label","cep","postalCode","cidade","city","estado","stateProvince","pais","countryRegion","endereco","street","homeAddress","parseVCard","e","console","log","useEffect","filename","parseDadosCartao","element","document","createElement","setAttribute","encodeURIComponent","getFormattedString","style","display","body","appendChild","click","removeChild","download","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.940cf2a1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { CRYPT_KEY } from './shared/security/cryptKey';\r\nimport Crypto from 'simple-crypto-js';\r\n\r\ninterface DadosCartao {\r\n  apelido: string,\r\n  nome: string,\r\n  empresa: string,\r\n  cargo: string,\r\n  site: string,\r\n  telefone1: string,\r\n  telefone2: string,\r\n  email: string,\r\n  endereco: string,\r\n  cep: string,\r\n  pais: string,\r\n  estado: string,\r\n  cidade: string,\r\n  tipoDeEndereco: string,\r\n  exp: string,\r\n}\r\n\r\nfunction App() {\r\n  var headers = new Headers();\r\n  headers.set('Content-Disposition', 'attachment');\r\n  headers.set('content-Type', 'text/vcard; charset=utf-8');\r\n\r\n  const [ocorreuUmaFalha, setOcorreuUmaFalha] = useState(false);\r\n  const [expirou, setExpirou] = useState(false);\r\n  const [nome, setNome] = useState('');\r\n\r\n  const verificarExpiracao = (exp: string) : boolean => {\r\n    try {\r\n      const dataExpiracao = new Date(exp);\r\n      const dataHoje = new Date();\r\n      const expirou = dataHoje > dataExpiracao;\r\n      return expirou;\r\n    } \r\n    catch {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  const getQueryParams = () => {\r\n    return window.location.search\r\n    .substring(1)\r\n    .split(\"&\")\r\n    .map(v => v.split(\"=\"))\r\n    .reduce((map, [key, value]) => map.set(key, decodeURIComponent(value)), new Map())\r\n  }\r\n\r\n  const parseVCard = (dados : DadosCartao) : object => {\r\n    var vCardsJS = require('vcards-js');\r\n    var vCard = vCardsJS();\r\n    \r\n    if (dados.nome && dados.nome.length > 0) {\r\n      let split = dados.nome.split(\" \");\r\n      let firstName = \"\";\r\n      \r\n      split.forEach((name, index) => {\r\n        if (index !== split.length - 1)\r\n          firstName = firstName + \" \" + name;\r\n      });\r\n\r\n      setNome(firstName);\r\n      vCard.firstName = firstName;\r\n      vCard.lastName = split[split.length - 1];\r\n    }\r\n    if (dados.empresa && dados.empresa.length > 0)\r\n      vCard.organization = dados.empresa;\r\n    if (dados.cargo && dados.cargo.length > 0)\r\n      vCard.title = dados.cargo;\r\n    if (dados.site && dados.site.length > 0)\r\n      vCard.url = dados.site;\r\n    if (dados.telefone1 && dados.telefone1.length > 0)\r\n      vCard.cellPhone = dados.telefone1;\r\n    if (dados.telefone2 && dados.telefone2.length > 0)\r\n      vCard.workPhone = dados.telefone2;\r\n    if (dados.email && dados.email.length > 0)\r\n      vCard.email = dados.email;\r\n\r\n    if (dados.tipoDeEndereco == \"Work Address\") {\r\n      vCard.workAddress.label = \"Endereço comercial\";\r\n      if (dados.cep && dados.cep.length > 0)\r\n        vCard.workAddress.postalCode = dados.cep;\r\n      if (dados.cidade && dados.cidade.length > 0)\r\n        vCard.workAddress.city = dados.cidade;\r\n      if (dados.estado && dados.estado.length > 0)\r\n        vCard.workAddress.stateProvince = dados.estado;\r\n      if (dados.pais && dados.pais.length > 0)\r\n        vCard.workAddress.countryRegion = dados.pais;\r\n      if (dados.endereco && dados.endereco.length > 0)\r\n        vCard.workAddress.street = dados.endereco;\r\n    }\r\n    else {\r\n      vCard.homeAddress.label = \"Endereço residencial\";\r\n      if (dados.cep && dados.cep.length > 0)\r\n        vCard.homeAddress.postalCode = dados.cep;\r\n      if (dados.cidade && dados.cidade.length > 0)\r\n        vCard.homeAddress.city = dados.cidade;\r\n      if (dados.estado && dados.estado.length > 0)\r\n        vCard.homeAddress.stateProvince = dados.estado;\r\n      if (dados.pais && dados.pais.length > 0)\r\n        vCard.homeAddress.countryRegion = dados.pais;\r\n      if (dados.endereco && dados.endereco.length > 0)\r\n        vCard.homeAddress.street = dados.endereco;\r\n    }\r\n  \r\n    return vCard;\r\n  }\r\n\r\n  const parseToken = () : any => {\r\n    try {\r\n      const queryParams = getQueryParams();\r\n      if (queryParams) {\r\n        const token = queryParams.get('token');\r\n        let simpleCrypto = new Crypto(CRYPT_KEY);\r\n        let decrypted : DadosCartao = JSON.parse(simpleCrypto.decrypt(token) as string) as DadosCartao;\r\n\r\n        const dadosCartao = decrypted;\r\n\r\n        if (verificarExpiracao(dadosCartao.exp)) {\r\n          setExpirou(true);\r\n          return null;\r\n        }\r\n        else\r\n          return parseVCard(dadosCartao);\r\n      }\r\n      else {\r\n        setOcorreuUmaFalha(true);\r\n        return null;\r\n      }\r\n    }\r\n    catch (e){\r\n      console.log(e)\r\n      setOcorreuUmaFalha(true);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const download = (filename: string) => {\r\n    let parseDadosCartao = parseToken();\r\n\r\n    if (parseDadosCartao) {\r\n      var element = document.createElement('a');\r\n      element.setAttribute('href', 'data:text/vcard;charset=utf-8,' \r\n        + encodeURIComponent(parseDadosCartao.getFormattedString()));\r\n      element.setAttribute('download', filename);\r\n    \r\n      element.style.display = 'none';\r\n      document.body.appendChild(element);\r\n    \r\n      element.click();\r\n    \r\n      document.body.removeChild(element);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    download(`${nome.length > 0 ? nome : 'CartãoPessoal'}.vcf`);\r\n  }, []);\r\n  \r\n  return (\r\n    <div>\r\n      { expirou ? 'Não foi possível obter os dados do usuário pois o QRCode pois sua validade expirou' :\r\n        ocorreuUmaFalha ? 'Não foi possível obter os dados do usuário pois ocorreu uma falha na obtenção dos dados, nos desculpe' :\r\n        ''   \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export const CRYPT_KEY = 'U2Fsd'; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}