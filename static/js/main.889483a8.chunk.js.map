{"version":3,"sources":["App.tsx","shared/security/cryptKey.tsx","index.tsx"],"names":["App","headers","Headers","set","useState","ocorreuUmaFalha","setOcorreuUmaFalha","expirou","setExpirou","parseToken","queryParams","window","location","search","substring","split","map","v","reduce","key","value","decodeURIComponent","Map","token","get","cryptoJS","require","bytes","AES","decrypt","dadosCartao","JSON","parse","toString","enc","Utf8","exp","dataExpiracao","Date","verificarExpiracao","dados","vCard","vCardsJS","nome","length","firstName","forEach","name","index","lastName","empresa","organization","cargo","title","site","url","telefone1","cellPhone","telefone2","workPhone","email","tipoDeEndereco","workAddress","label","cep","postalCode","cidade","city","estado","stateProvince","pais","countryRegion","endereco","street","homeAddress","parseVCard","useEffect","filename","parseDadosCartao","element","document","createElement","setAttribute","encodeURIComponent","getFormattedString","style","display","body","appendChild","click","removeChild","setTimeout","close","download","ReactDOM","render","StrictMode","getElementById"],"mappings":"iQAmLeA,MA9Jf,WACE,IAAIC,EAAU,IAAIC,QAClBD,EAAQE,IAAI,sBAAuB,cACnCF,EAAQE,IAAI,eAAgB,6BAHf,MAKiCC,oBAAS,GAL1C,mBAKNC,EALM,KAKWC,EALX,OAMiBF,oBAAS,GAN1B,mBAMNG,EANM,KAMGC,EANH,KAwFPC,EAAa,WACjB,IACE,IAAMC,EArEDC,OAAOC,SAASC,OACtBC,UAAU,GACVC,MAAM,KACNC,KAAI,SAAAC,GAAC,OAAIA,EAAEF,MAAM,QACjBG,QAAO,SAACF,EAAD,0BAAOG,EAAP,KAAYC,EAAZ,YAAuBJ,EAAIb,IAAIgB,EAAKE,mBAAmBD,MAAS,IAAIE,KAkE1E,GAAIZ,EAAa,CACf,IAAMa,EAAQb,EAAYc,IAAI,SACxBC,EAAWC,EAAQ,KAEnBC,EAAQF,EAASG,IAAIC,QAAQN,ECpHlB,SDqHjB,GAAII,EAAO,CACT,IAAMG,EAAcC,KAAKC,MAAML,EAAMM,SAASR,EAASS,IAAIC,OAE3D,OA3FmB,SAACC,GAC1B,IACE,IAAMC,EAAgB,IAAIC,KAAKF,GAG/B,OAFiB,IAAIE,KACMD,EAG7B,SACE,OAAO,GAmFCE,CAAmBT,EAAYM,MACjC5B,GAAW,GACJ,MAxEE,SAACgC,GAClB,IACIC,EADWf,EAAQ,GACXgB,GAEZ,GAAIF,EAAMG,MAAQH,EAAMG,KAAKC,OAAS,EAAG,CACvC,IAAI7B,EAAQyB,EAAMG,KAAK5B,MAAM,KACzB8B,EAAY,GAEhB9B,EAAM+B,SAAQ,SAACC,EAAMC,GACfA,IAAUjC,EAAM6B,OAAS,IAC3BC,EAAYA,EAAY,IAAME,MAGlCN,EAAMI,UAAYA,EAClBJ,EAAMQ,SAAWlC,EAAMA,EAAM6B,OAAS,GA0CxC,OAxCIJ,EAAMU,SAAWV,EAAMU,QAAQN,OAAS,IAC1CH,EAAMU,aAAeX,EAAMU,SACzBV,EAAMY,OAASZ,EAAMY,MAAMR,OAAS,IACtCH,EAAMY,MAAQb,EAAMY,OAClBZ,EAAMc,MAAQd,EAAMc,KAAKV,OAAS,IACpCH,EAAMc,IAAMf,EAAMc,MAChBd,EAAMgB,WAAahB,EAAMgB,UAAUZ,OAAS,IAC9CH,EAAMgB,UAAYjB,EAAMgB,WACtBhB,EAAMkB,WAAalB,EAAMkB,UAAUd,OAAS,IAC9CH,EAAMkB,UAAYnB,EAAMkB,WACtBlB,EAAMoB,OAASpB,EAAMoB,MAAMhB,OAAS,IACtCH,EAAMmB,MAAQpB,EAAMoB,OAEM,gBAAxBpB,EAAMqB,gBACRpB,EAAMqB,YAAYC,MAAQ,wBACtBvB,EAAMwB,KAAOxB,EAAMwB,IAAIpB,OAAS,IAClCH,EAAMqB,YAAYG,WAAazB,EAAMwB,KACnCxB,EAAM0B,QAAU1B,EAAM0B,OAAOtB,OAAS,IACxCH,EAAMqB,YAAYK,KAAO3B,EAAM0B,QAC7B1B,EAAM4B,QAAU5B,EAAM4B,OAAOxB,OAAS,IACxCH,EAAMqB,YAAYO,cAAgB7B,EAAM4B,QACtC5B,EAAM8B,MAAQ9B,EAAM8B,KAAK1B,OAAS,IACpCH,EAAMqB,YAAYS,cAAgB/B,EAAM8B,MACtC9B,EAAMgC,UAAYhC,EAAMgC,SAAS5B,OAAS,IAC5CH,EAAMqB,YAAYW,OAASjC,EAAMgC,YAGnC/B,EAAMiC,YAAYX,MAAQ,0BACtBvB,EAAMwB,KAAOxB,EAAMwB,IAAIpB,OAAS,IAClCH,EAAMiC,YAAYT,WAAazB,EAAMwB,KACnCxB,EAAM0B,QAAU1B,EAAM0B,OAAOtB,OAAS,IACxCH,EAAMiC,YAAYP,KAAO3B,EAAM0B,QAC7B1B,EAAM4B,QAAU5B,EAAM4B,OAAOxB,OAAS,IACxCH,EAAMiC,YAAYL,cAAgB7B,EAAM4B,QACtC5B,EAAM8B,MAAQ9B,EAAM8B,KAAK1B,OAAS,IACpCH,EAAMiC,YAAYH,cAAgB/B,EAAM8B,MACtC9B,EAAMgC,UAAYhC,EAAMgC,SAAS5B,OAAS,IAC5CH,EAAMiC,YAAYD,OAASjC,EAAMgC,WAG9B/B,EAmBQkC,CAAW7C,GAIpB,OADAxB,GAAmB,GACZ,KAKT,OADAA,GAAmB,GACZ,KAGX,SAEE,OADAA,GAAmB,GACZ,OA8BX,OAJAsE,qBAAU,YAtBO,SAACC,GAChB,IAAIC,EAAmBrE,IAEvB,GAAIqE,EAAkB,CACpB,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCACzBC,mBAAmBL,EAAiBM,uBACxCL,EAAQG,aAAa,WAAYL,GAEjCE,EAAQM,MAAMC,QAAU,OACxBN,SAASO,KAAKC,YAAYT,GAE1BA,EAAQU,QAERT,SAASO,KAAKG,YAAYX,GAE1BY,YAAW,WACThF,OAAOiF,UACN,MAKLC,CAAS,0BACR,IAGD,6BACItF,EAAU,8FACVF,EAAkB,uHAClB,KExKRyF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,U","file":"static/js/main.889483a8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CRYPT_KEY } from './shared/security/cryptKey';\n\ninterface DadosCartao {\n  apelido: string,\n  nome: string,\n  empresa: string,\n  cargo: string,\n  site: string,\n  telefone1: string,\n  telefone2: string,\n  email: string,\n  endereco: string,\n  cep: string,\n  pais: string,\n  estado: string,\n  cidade: string,\n  tipoDeEndereco: string,\n  exp: string,\n}\n\nfunction App() {\n  var headers = new Headers();\n  headers.set('Content-Disposition', 'attachment');\n  headers.set('content-Type', 'text/vcard; charset=utf-8');\n\n  const [ocorreuUmaFalha, setOcorreuUmaFalha] = useState(false);\n  const [expirou, setExpirou] = useState(false);\n\n  const verificarExpiracao = (exp: string) : boolean => {\n    try {\n      const dataExpiracao = new Date(exp);\n      const dataHoje = new Date();\n      const expirou = dataHoje > dataExpiracao;\n      return expirou;\n    } \n    catch {\n      return true;\n    }\n  }\n\n  const getQueryParams = () => {\n    return window.location.search\n    .substring(1)\n    .split(\"&\")\n    .map(v => v.split(\"=\"))\n    .reduce((map, [key, value]) => map.set(key, decodeURIComponent(value)), new Map())\n\n  }\n\n  const parseVCard = (dados : DadosCartao) : object => {\n    var vCardsJS = require('vcards-js');\n    var vCard = vCardsJS();\n    \n    if (dados.nome && dados.nome.length > 0) {\n      let split = dados.nome.split(\" \");\n      let firstName = \"\";\n      \n      split.forEach((name, index) => {\n        if (index !== split.length - 1)\n          firstName = firstName + \" \" + name;\n      });\n\n      vCard.firstName = firstName;\n      vCard.lastName = split[split.length - 1];\n    }\n    if (dados.empresa && dados.empresa.length > 0)\n      vCard.organization = dados.empresa;\n    if (dados.cargo && dados.cargo.length > 0)\n      vCard.title = dados.cargo;\n    if (dados.site && dados.site.length > 0)\n      vCard.url = dados.site;\n    if (dados.telefone1 && dados.telefone1.length > 0)\n      vCard.cellPhone = dados.telefone1;\n    if (dados.telefone2 && dados.telefone2.length > 0)\n      vCard.workPhone = dados.telefone2;\n    if (dados.email && dados.email.length > 0)\n      vCard.email = dados.email;\n\n    if (dados.tipoDeEndereco == \"Work Address\") {\n      vCard.workAddress.label = \"Endereço comercial\";\n      if (dados.cep && dados.cep.length > 0)\n        vCard.workAddress.postalCode = dados.cep;\n      if (dados.cidade && dados.cidade.length > 0)\n        vCard.workAddress.city = dados.cidade;\n      if (dados.estado && dados.estado.length > 0)\n        vCard.workAddress.stateProvince = dados.estado;\n      if (dados.pais && dados.pais.length > 0)\n        vCard.workAddress.countryRegion = dados.pais;\n      if (dados.endereco && dados.endereco.length > 0)\n        vCard.workAddress.street = dados.endereco;\n    }\n    else {\n      vCard.homeAddress.label = \"Endereço residencial\";\n      if (dados.cep && dados.cep.length > 0)\n        vCard.homeAddress.postalCode = dados.cep;\n      if (dados.cidade && dados.cidade.length > 0)\n        vCard.homeAddress.city = dados.cidade;\n      if (dados.estado && dados.estado.length > 0)\n        vCard.homeAddress.stateProvince = dados.estado;\n      if (dados.pais && dados.pais.length > 0)\n        vCard.homeAddress.countryRegion = dados.pais;\n      if (dados.endereco && dados.endereco.length > 0)\n        vCard.homeAddress.street = dados.endereco;\n    }\n  \n    return vCard;\n  }\n\n  const parseToken = () : any => {\n    try {\n      const queryParams = getQueryParams();\n      if (queryParams) {\n        const token = queryParams.get('token');\n        const cryptoJS = require('crypto-js');\n\n        const bytes = cryptoJS.AES.decrypt(token, CRYPT_KEY);\n        if (bytes) {\n          const dadosCartao = JSON.parse(bytes.toString(cryptoJS.enc.Utf8));\n\n          if (verificarExpiracao(dadosCartao.exp)) {\n            setExpirou(true);\n            return null;\n          }\n          else\n            return parseVCard(dadosCartao);\n        }\n        else {\n          setOcorreuUmaFalha(true);\n          return null;\n        }\n      }\n      else {\n        setOcorreuUmaFalha(true);\n        return null;\n      }\n    }\n    catch {\n      setOcorreuUmaFalha(true);\n      return null;\n    }\n  }\n\n  const download = (filename: string) => {\n    let parseDadosCartao = parseToken();\n\n    if (parseDadosCartao) {\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:text/vcard;charset=utf-8,' \n        + encodeURIComponent(parseDadosCartao.getFormattedString()));\n      element.setAttribute('download', filename);\n    \n      element.style.display = 'none';\n      document.body.appendChild(element);\n    \n      element.click();\n    \n      document.body.removeChild(element);\n\n      setTimeout(() => {\n        window.close();\n      }, 1000);\n    }\n  }\n\n  useEffect(() => {\n    download(`CartãoPessoal.vcf`);\n  }, []);\n  \n  return (\n    <div>\n      { expirou ? 'Não foi possível obter os dados do usuário pois o QRCode pois sua validade expirou' :\n        ocorreuUmaFalha ? 'Não foi possível obter os dados do usuário pois ocorreu uma falha na obtenção dos dados, nos desculpe' :\n        ''   \n      }\n    </div>\n  );\n}\n\nexport default App;\n","export const CRYPT_KEY = 'U2Fsd'; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}